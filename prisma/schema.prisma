// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  email                 String            @unique
  name                  String?
  address               String?
  createdAt             DateTime?         @default(now())
  phone                 String?           @unique
  avatar                String?
  password              String
  updatedAt             DateTime?         @updatedAt
  Work                  Work[]
  Comment               Comment[]
  WorkRequest           WorkRequest[]
  WorkImplementer       WorkImplementer[]
  role                  Role              @default(USER)
  WorkLog               WorkLog[]
  notificationsReceived Notification[]    @relation("UserToNotification")
  notificationsSent     Notification[]    @relation("SenderToNotification")

  @@map("users")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  createdBy User?    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  Work      Work?    @relation(fields: [workId], references: [id])
  workId    String?  @db.ObjectId

  @@map("comments")
}

model WorkImplementer {
  id      String        @id @default(auto()) @map("_id") @db.ObjectId
  user    User?         @relation(fields: [userId], references: [id])
  userId  String?       @db.ObjectId
  request WorkRequest[]
  Work    Work?         @relation(fields: [workId], references: [id])
  workId  String?       @db.ObjectId

  @@map("work_implementers")
}

model Work {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  createdAt   DateTime          @default(now())
  createdBy   User              @relation(fields: [userId], references: [id])
  userId      String            @db.ObjectId
  comments    Comment[]
  status      WorkStatus        @default(IN_PROGRESS)
  startTime   DateTime
  endTime     DateTime
  implementer WorkImplementer[]
  WorkLog     WorkLog[]

  @@map("works")
}

model WorkRequest {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  isCompleted       Boolean
  createdBy         User             @relation(fields: [userId], references: [id])
  userId            String           @db.ObjectId
  WorkImplementer   WorkImplementer? @relation(fields: [workImplementerId], references: [id])
  workImplementerId String?          @db.ObjectId

  @@map("work_requests")
}

model WorkLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  workId    String?  @db.ObjectId
  work      Work?    @relation(fields: [workId], references: [id])
  content   String
  LOG_TYPE  LogType
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])

  @@map("work_logs")
}

model Notification {
  notification_id String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId      String   @db.ObjectId
  senderId        String   @db.ObjectId
  message         String
  timestamp       DateTime @default(now())
  receiver        User     @relation("UserToNotification", fields: [receiverId], references: [id])
  sender          User     @relation("SenderToNotification", fields: [senderId], references: [id])
  workId          String?
  isRead          Boolean  @default(false)

  @@map("notifications")
}

enum WorkStatus {
  IN_PROGRESS
  COMPLETED
  PAUSE
  PENDING
}

enum Role {
  ADMIN
  USER
}

enum LogType {
  COMMENT
  ADD_MEMBER
  REMOVE_MEMBER
  ADD_WORK_REQUEST
  COMPLETED_WORK_REQUEST
  COMPLETED_WORK
  PAUSED_WORK
  CREATED_WORK
  CONTINUE_WORK
  REQUEST_TO_COMPLETED
}
